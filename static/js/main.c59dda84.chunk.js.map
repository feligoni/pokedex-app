{"version":3,"sources":["components/Navbar/Navbar.js","components/Navbar/index.js","helpers/typeColors.js","components/Card/Card.js","components/Card/index.js","services/pokemon.js","components/Search/search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","num","places","pokemon","src","sprites","front_default","alt","id","String","padStart","name","toUpperCase","types","map","type","style","backgroundColor","weight","height","abilities","ability","getPokemon","url","Promise","resolve","reject","fetch","then","res","json","data","getAllPokemon","a","console","log","Search","searchQuery","setSearchQuery","action","method","class","for","onClick","value","onInput","e","target","placeholder","App","useState","pokemonData","setPokemonData","setNextUrl","setPrevUrl","loading","setLoading","initialURL","search","window","location","query","URLSearchParams","get","useEffect","response","next","previous","loadPokemon","results","fetchData","all","pokemonRecord","_pokemonData","filteredPokemon","filter","toString","includes","toLowerCase","filterPokemon","textAlign","i","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c59dda84.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      <h1>Kanto Pokedex</h1>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import Navbar from './Navbar';\n\nexport default Navbar;","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React from \"react\";\nimport typeColors from \"../../helpers/typeColors\";\nimport \"./style.css\";\n\nfunction Card({ pokemon }) {\n  const zeroPad = (num, places) => String(num).padStart(places, \"0\");\n  return (\n    <div className=\"Card\">\n      <div className=\"Card__img\">\n        <img src={pokemon.sprites.front_default} alt=\"\" />\n      </div>\n      <div className=\"Card__name\">\n        #{zeroPad(pokemon.id, 3)}\n        &nbsp;{pokemon.name.toUpperCase()}\n      </div>\n      <div className=\"Card__types\">\n        {pokemon.types.map((type) => {\n          return (\n            <div\n              className=\"Card__type\"\n              style={{ backgroundColor: typeColors[type.type.name] }}\n            >\n              {type.type.name}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"Card__info\">\n        <div className=\"Card__data Card__data--weight\">\n          <p className=\"title\">Weight</p>\n          <p>{pokemon.weight}</p>\n        </div>\n        <div className=\"Card__data Card__data--weight\">\n          <p className=\"title\">Height</p>\n          <p>{pokemon.height}</p>\n        </div>\n        <div className=\"Card__data Card__data--ability\">\n          <p className=\"title\">Ability</p>\n          <p>{pokemon.abilities[0].ability.name}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import Card from './Card';\n\nexport default Card;","export function getPokemon({ url }) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        resolve(data);\n      });\n  });\n}\n\nexport async function getAllPokemon(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        resolve(data);\n        console.log(data);\n      });\n  });\n}\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Search = ({ searchQuery, setSearchQuery }) => {\r\n  const closeHandler = () => {\r\n    setSearchQuery(\"\");\r\n  };\r\n  return (\r\n    <form action=\"/\" method=\"get\">\r\n      <div class=\"search\">\r\n        <input type=\"checkbox\" id=\"trigger\" class=\"search__checkbox\" />\r\n        <label class=\"search__label-init\" for=\"trigger\"></label>\r\n        <label\r\n          class=\"search__label-active\"\r\n          for=\"trigger\"\r\n          onClick={closeHandler}\r\n        ></label>\r\n        <div class=\"search__border\"></div>\r\n        <input\r\n          type=\"text\"\r\n          class=\"search__input\"\r\n          value={searchQuery}\r\n          onInput={(e) => setSearchQuery(e.target.value)}\r\n          id=\"header-search\"\r\n          placeholder=\"Search\"\r\n          name=\"s\"\r\n        />\r\n        <div class=\"search__close\"></div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport { getPokemon, getAllPokemon } from \"./services/pokemon\";\nimport Search from \"./components/Search/search\";\nimport \"./App.css\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState(\"\");\n  const [prevUrl, setPrevUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon/?limit=151\";\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get(\"s\");\n  const [searchQuery, setSearchQuery] = useState(query || \"\");\n\n  const filterPokemon = (pokemonData, query) => {\n    if (!query) {\n      return pokemonData;\n    }\n\n    return pokemonData.filter((pokemonData) => {\n      if (query >= 0) {\n        const pokemonName = pokemonData.id.toString();\n        return pokemonName.includes(query.toLowerCase());\n      } else {\n        const pokemonName = pokemonData.name.toLowerCase();\n        return pokemonName.includes(query.toLowerCase());\n      }\n    });\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialURL);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      await loadPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl);\n    await loadPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  };\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl);\n    await loadPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  };\n\n  const loadPokemon = async (data) => {\n    let _pokemonData = await Promise.all(\n      data.map(async (pokemon) => {\n        let pokemonRecord = await getPokemon(pokemon);\n        return pokemonRecord;\n      })\n    );\n    setPokemonData(_pokemonData);\n  };\n\n  const filteredPokemon = filterPokemon(pokemonData, searchQuery);\n  return (\n    <>\n      <Navbar />\n\n      {loading ? (\n        <h1 style={{ textAlign: \"center\" }}>Loading...</h1>\n      ) : (\n        <>\n          {/* <div className=\"btn\">\n              <button onClick={prev}>Prev</button>\n              <button onClick={next}>Next</button>\n            </div> */}\n          <Search searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n          <div className=\"grid-container\">\n            {filteredPokemon.map((pokemon, i) => {\n              return <Card key={i} pokemon={pokemon} />;\n            })}\n          </div>\n          {/* <div className=\"btn\">\n              <button onClick={prev}>Prev</button>\n              <button onClick={next}>Next</button>\n            </div> */}\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}