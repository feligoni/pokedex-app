{"version":3,"sources":["assets/pokeball.png","components/Navbar/Navbar.js","components/Navbar/index.js","helpers/typeColors.js","components/Card/Card.js","components/Card/index.js","services/pokemon.js","components/Search/search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","pokeball","alt","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","num","places","pokemon","capitalize","str","lower","toLowerCase","charAt","toUpperCase","slice","sprites","front_default","back_default","id","String","padStart","name","types","map","type","style","backgroundColor","weight","height","moves","move","getPokemon","url","Promise","resolve","reject","fetch","then","res","json","data","getAllPokemon","a","Search","searchQuery","setSearchQuery","action","method","onSubmit","e","preventDefault","class","value","onInput","target","placeholder","App","useState","pokemonData","setPokemonData","loading","setLoading","initialURL","search","window","location","query","URLSearchParams","get","kanto","setKanto","johto","setJohto","hoenn","setHoenn","isSelected","setIsSelected","useEffect","response","loadPokemon","results","fetchData","all","pokemonRecord","_pokemonData","filteredPokemon","filter","toString","includes","filterPokemon","onClick","scrollTo","top","behavior","Fragment","i","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4766b592.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pokeball.b8326827.png\";","import React from \"react\";\nimport \"./style.css\";\nimport pokeball from \"../../assets/pokeball.png\";\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      <img src={pokeball} alt=\"pokeball\" className=\"pokeball\" />\n      <h1>Pokedex</h1>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import Navbar from './Navbar';\n\nexport default Navbar;","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React from \"react\";\nimport typeColors from \"../../helpers/typeColors\";\nimport \"./style.css\";\n\nfunction Card({ pokemon }) {\n  const capitalize = (str) => {\n    const lower = str.toLowerCase();\n    return str.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  const zeroPad = (num, places) => String(num).padStart(places, \"0\");\n  return (\n    <div className=\"Card\">\n      <div className=\"Card__img\">\n        <img src={pokemon.sprites.front_default} alt=\"\" />\n        <img src={pokemon.sprites.back_default} alt=\"\" />\n      </div>\n      <div className=\"Card__name\">\n        #{zeroPad(pokemon.id, 3)}\n        &nbsp;{pokemon.name.toUpperCase()}\n      </div>\n      <div className=\"Card__types\">\n        {pokemon.types.map((type) => {\n          return (\n            <div\n              className=\"Card__type\"\n              style={{ backgroundColor: typeColors[type.type.name] }}\n            >\n              {type.type.name}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"Card__info\">\n        <div className=\"Card__data Card__data--weight\">\n          <p className=\"title\">Weight</p>\n          <p>{pokemon.weight}</p>\n          <p className=\"title\">Height</p>\n          <p>{pokemon.height}</p>\n        </div>\n        <div className=\"Card__data Card__data--ability\">\n          <p className=\"title\">Moves</p>\n          <select>\n            {pokemon.moves.map((move) => {\n              return <option>{capitalize(move.move.name)}</option>;\n            })}\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import Card from './Card';\n\nexport default Card;","export function getPokemon({ url }) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        resolve(data);\n      });\n  });\n}\n\nexport async function getAllPokemon(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        resolve(data);\n      });\n  });\n}\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Search = ({ searchQuery, setSearchQuery }) => {\r\n  return (\r\n    <form\r\n      action=\"/\"\r\n      method=\"get\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div class=\"search\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"search__input\"\r\n          value={searchQuery}\r\n          onInput={(e) => setSearchQuery(e.target.value)}\r\n          id=\"header-search\"\r\n          placeholder=\"Search\"\r\n          name=\"s\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport { getPokemon, getAllPokemon } from \"./services/pokemon\";\nimport Search from \"./components/Search/search\";\nimport \"./App.css\";\nimport { Link } from \"react-scroll\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon/?limit=386\";\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get(\"s\");\n  const [searchQuery, setSearchQuery] = useState(query || \"\");\n  const [kanto, setKanto] = useState(false);\n  const [johto, setJohto] = useState(false);\n  const [hoenn, setHoenn] = useState(false);\n  const [isSelected, setIsSelected] = useState(false);\n\n  const filterPokemon = (pokemonData, query) => {\n    if (!query) {\n      return pokemonData;\n    }\n    return pokemonData.filter((pokemonData) => {\n      if (query >= 0) {\n        const pokemonName = pokemonData.id.toString();\n        return pokemonName.includes(query.toLowerCase());\n      } else {\n        const pokemonName = pokemonData.name.toLowerCase();\n        return pokemonName.includes(query.toLowerCase());\n      }\n    });\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialURL);\n      await loadPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  const loadPokemon = async (data) => {\n    let _pokemonData = await Promise.all(\n      data.map(async (pokemon) => {\n        let pokemonRecord = await getPokemon(pokemon);\n        return pokemonRecord;\n      })\n    );\n    setPokemonData(_pokemonData);\n  };\n\n  const kantoHandler = () => {\n    setIsSelected(true);\n    setKanto(true);\n    setHoenn(false);\n    setJohto(false);\n    if (!isSelected) {\n      window.scrollTo({ top: 430, behavior: \"smooth\" });\n    }\n  };\n  const johtoHandler = () => {\n    setKanto(false);\n    setIsSelected(true);\n    setHoenn(false);\n    setJohto(true);\n    if (!isSelected) {\n      window.scrollTo({ top: 450, behavior: \"smooth\" });\n    }\n  };\n  const hoennHandler = () => {\n    setKanto(false);\n    setIsSelected(true);\n    setHoenn(true);\n    setJohto(false);\n    if (!isSelected) {\n      window.scrollTo({ top: 250, behavior: \"smooth\" });\n    }\n  };\n\n  const filteredPokemon = filterPokemon(pokemonData, searchQuery);\n  return (\n    <>\n      <Navbar />\n      <div className=\"region__select\">\n        <h1>Select region:</h1>\n        <button onClick={kantoHandler}>KANTO</button>\n        <button onClick={johtoHandler}>JOHTO</button>\n        <button onClick={hoennHandler}>HOENN</button>\n      </div>\n      {!isSelected && <div className=\"blank\" />}\n      {!loading && isSelected && (\n        <React.Fragment>\n          <Search searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n          <div className=\"grid-container\">\n            {filteredPokemon.map((pokemon, i) => {\n              if (pokemon.id < 152 && kanto) {\n                return <Card key={i} pokemon={pokemon} />;\n              }\n              if (pokemon.id > 151 && pokemon.id < 252 && johto) {\n                return <Card key={i} pokemon={pokemon} />;\n              }\n              if (pokemon.id > 251 && hoenn) {\n                return <Card key={i} pokemon={pokemon} />;\n              }\n            })}\n          </div>\n        </React.Fragment>\n      )}\n      <div id=\"container\" />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}